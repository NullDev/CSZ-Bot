name: CI

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

env:
  DOCKER_BUILDKIT: "1"

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      with:
        show-progress: false
        fetch-depth: 0

    - uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - run: bun install
    - run: bun ci
    - run: bun run test

  build:
    name: Build
    runs-on: ubuntu-latest

    needs: lint

    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.tag.outputs.first }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - uses: actions/checkout@v4
      with:
        show-progress: false

    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3
    - uses: docker/login-action@v3
      with:
        registry: "ghcr.io"
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/nulldev/csz-bot
        tags: |
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Extract tag
      id: tag
      env:
        INPUT_TAGS: ${{ steps.meta.outputs.tags }}
      run: |
        first=$(echo "$INPUT_TAGS" | cut -d',' -f1)

        echo "first=$first" >> "$GITHUB_OUTPUT"


    - name: Build and export
      uses: docker/build-push-action@v6
      id: build
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-e2e:
    name: Deploy e2e
    uses: ./.github/workflows/create-e2e-environment.yml
    if: ${{ !github.event.repository.fork }}

    needs: [ build ]

    with:
      dry-run: ${{ github.ref == 'refs/heads/master' }}
      image: ${{ needs.build.outputs.image-tag }}
    secrets:
      bot-token: ${{ secrets.CI_BOT_TOKEN }}
      client-id: ${{ secrets.CI_CLIENT_ID }}
      ssh-host: ${{ secrets.SSH_HOST }}
      ssh-username: ${{ secrets.SSH_USERNAME }}
      ssh-key: ${{ secrets.SSH_KEY }}
      ssh-port: ${{ secrets.SSH_PORT }}


